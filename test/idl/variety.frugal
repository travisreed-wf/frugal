# Example frugal file. Frugal is a superset of Thrift, meaning this file can
# contain valid Thrift or Frugal-extended syntax.
namespace java variety.java
namespace py variety.python

include "base.frugal"
include "intermediate_include.frugal"
include "validStructs.frugal"
include "ValidTypes.frugal"
include "subdir_includes/subdir_include.frugal"

typedef i64 id
typedef i32 int
typedef map<int, string> request

/**
 * This docstring doesn't get added to the generated code because
 * it doesn't have the @ sign.
 */
const i32 redef_const = base.const_i32_from_base;
const base.thing const_thing = {an_id: 1, a_string: "some string"}
const id DEFAULT_ID = -1
const id other_default = DEFAULT_ID

const i8 thirtyfour = 34

const map<string,string> MAPCONSTANT = {'hello':'world', 'goodnight':'moon'}

const Event ConstEvent1 = {"ID": -2, "Message": "first one"}
const Event ConstEvent2 = {"ID": -7, "Message": "second one"}



const list<i32> NumsList = [2,4,7,1]
const set<int> NumsSet = [1,3,8,0]

const map<string,Event> MAPCONSTANT2 = {'hello':{"ID": -2, "Message": "first here", "const": bin_const}}

const binary bin_const = "hello"

const bool true_constant = true
const bool false_constant = false

const HealthCondition const_hc = 2;

const string evil_string = "thin'g\" \""
const string evil_string2 = 'th\'ing"ad"f'

const TestLowercase const_lower = {"lowercaseInt": 2}

struct TestBase {
    1: base.thing base_struct,
}

struct TestLowercase {
    1: i32 lowercaseInt,
}

enum HealthCondition {
    /**@
     * This docstring gets added to the generated code because it
     * has the @ sign.
     */
    PASS = 1,
    /**@
     * This docstring also gets added to the generated code
     * because it has the @ sign.
     */
    WARN = 2,
    FAIL = 3 (deprecated="use something else"),
    /**@
     * This is a docstring comment for a deprecated enum value that has been
     * spread across two lines.
     */
    UNKNOWN = 4 (deprecated="don't use this; use \"something else\"")
}

union TestingUnions {
	1: id AnID,
	2: string aString,
	3: int someotherthing,
	4: i16 AnInt16,
	5: request Requests,
	6: binary bin_field_in_union,
	7: bool depr (deprecated="use something else"),
}

/**@
 * This docstring gets added to the generated code because it has
 * the @ sign.
 */
struct Event {
    /**@ ID is a unique identifier for an event. */
    1: id ID = DEFAULT_ID,

    /**@ Message contains the event payload. */
    2: string Message
}

struct TestingDefaults {
    1: optional id ID2 = DEFAULT_ID,
    2: Event ev1 = {"ID": DEFAULT_ID, "Message": "a message"},
    3: Event ev2 = {"ID": 5, "Message": "a message2"},
    4: id ID = -2,
    5: string thing = 'a constant',
    6: optional string thing2 = 'another constant',
    7: list<int> listfield = [1, 2,3,4,5],
    8: id ID3 = other_default,
    9: binary bin_field,
    10: optional binary bin_field2,
    11: binary bin_field3,
    12: optional binary bin_field4 = bin_const,
    13: optional list<int> list2 = [1,3,4,5,8],
    14: optional list<int> list3,
    15: list<int> list4 = [1,2,3,6],
    16: optional map<string, string> a_map = {"k1": "v1", "k2": "v2"},
    17: required HealthCondition status = HealthCondition.PASS,
    18: required base.base_health_condition base_status = base.base_health_condition.FAIL,
}

enum ItsAnEnum {
    FIRST = 2,
    SECOND,
    THIRD,
    fourth,
    Fifth,
    sIxItH,
}

typedef string t1_string;
typedef t1_string t2_string;

struct EventWrapper {
    1: optional id ID,
    2: required Event Ev,
    3: list<Event> Events,
    4: set<Event> Events2,
    5: map<id, Event> EventMap,
    6: list<list<int>> Nums,
    7: list<ItsAnEnum> Enums,
    8: bool aBoolField,
    9: TestingUnions a_union,
    10: t2_string typedefOfTypedef,
    /**@
     * This is a docstring comment for a deprecated field that has been spread
     * across two lines.
     */
    11: bool depr (deprecated="use something else"),
    12: binary deprBinary (deprecated="use something else"),
    13: list<bool> deprList (deprecated="use something else"),
}

exception AwesomeException {
    /**@ ID is a unique identifier for an awesome exception. */
    1: id ID,

    /**@ Reason contains the error message. */
    2: string Reason

    3: bool depr (deprecated="use something else")
}

/**@
 * This is a thrift service. Frugal will generate bindings that include
 * a frugal Context for each service call.
 */
service Foo extends base.BaseFoo {
    /**@ Ping the server. */
    void Ping() (deprecated="don't use this; use \"something else\""),

    /**@ Blah the server. */
    i64 blah(1:i32 num, 2:string Str, 3:Event event) throws (1:AwesomeException awe, 2:base.api_exception api),

    /**@ oneway methods don't receive a response from the server. */
    oneway void oneWay(1:id id, 2:request req),

    binary bin_method(1:binary bin, 2:string Str) throws (1:base.api_exception api),

    i64 param_modifiers(1:i32 opt_num, 2: optional i32 default_num, 3: required i32 req_num),

    list<id> underlying_types_test(1:list<id> list_type, 2: set<id> set_type),

    validStructs.Thing getThing(),

    ValidTypes.MyInt getMyInt(),

    subdir_include.A use_subdir_struct(1:subdir_include.A a),
}

service FooTransitiveDeps extends intermediate_include.IntermediateFoo {
	void ping()
}

/**@
 * This docstring gets added to the generated code because it has
 * the @ sign. Prefix specifies topic prefix tokens, which can be static or
 * variable.
 */
scope Events prefix foo.{user} {
    /**@ This is a docstring. */
    EventCreated: Event // Inline comments are also supported
    SomeInt: i64
    SomeStr: string
    SomeList: list<map<id, Event>>
}
